JWT(Jason web Token):
	Encryption -> normal text to cypher text
	Decryption -> cypher text to noraml text
Symetric Cryptoghraphy -> in this a symetric key(same key) is shared between both A and B user to decrypt the Text.
	problem : The key need to be shared with both A and B before the communication

Asymetric Cryptograph -> veryone will have their own private key ,and public key (known to evryone)
		-> if A wants to send data to B then A will use encrypthe data using B's public key and then B will 
		Decrypt the data using his own private key 
	problem: lets say A want to send message to B and A encrypt the data using B's public key which C also know and in between C uses B's 
	         public key and decrypt the data using B's public key and manipulate data and it to B,now B will get C's encrypted data which is
		 melicious,which means in asymetric cryptography the sender is unknown ,to resolve identity issue we use Digital signatus
 Digital Signatue: A will use B's public key to encryt and then A will use his private to encrypt the data again ,when the data will reach to
		   B ,B will use A's public key to decrypt and his own Private key to decrypt again and get the data,


Filter: filters are java Class that intercepts and process http requests and responses bofore they reach or leave the controller

synchronous vs asynchronous :(@EnableWebSecurity vs @EnableWebFluxSecurity) -> service A calls to service B and wait for the response of service B
			     is called synchronous communication,whereas if service A does not wait for the response of Service B then 
			     its called Asynchronous communication,in Synchronous communication we use @EnableWebSecurity whereas in Asynchronous communication
			     we use @EnableWebFluxSecurity	
CSRF: any melicious website using the session of user try to access any website
      When we try to use any third party website it can use out session an can manipulate data,to get rid of this we use CSRF token,bcz even thought if that website has our
      Session ID but it wont have csrf token,but what if we dont even allow any other website to use our server.for that case we do same site strict.
    another solution is that make our every request statless.
UserDetalsService -> responsible to create user using 'UserDetails' class in which we have a class 'User' which has builder method which returs UserDetals
Reading User form db:
    if we want to read user from db then we have to give imlementation of AuthenticationProvider which has a method authenticate()
    but we have to use class DaoAuthenticationProvider and set User Details and set out Encoded Passoword.
    :DaoAuthenticationProvider has a mehtod setUserDetailsService() which accepts the object of UserDetailService
    :UserDetailsService is an interface which has a method loadUserByuserName() so we have to implement it,for this we'll create a class MyUserDetailService
    which will implement UserDetailsService and well give implementation of loadUserByUserNamer ()
    :Now we have to get user from db so we have to connect db and get user using JPA.

UsernamePasswordFilter